추상클래스(abstract class)
	-추상 메서드가 있는 클래스
	-추상클래스로는 인스턴스를 생성할 수 없다.
	-상속을 통해서 자손 클래스에 의해서만 완성 될 수 있다.(확장, extends)
		>추상 클래스를 상속받은 클래스들은 반드시 추상 메서드를 자신에 맞게 구현하라는 가제성
			(문법적인 제한)
		>추상클래스는 새로운 클래스를 작성하는데 있어서 바탕이 되는 클래스로의 의미를 가진다.

	추상클래스 선언
	class 앞에 abstract
	abstract class 클래스명{
	
	}

	1-1추상메서드(abstract method)
		-선언부만 작성하고, 구현부는 작성하지 않은 채로 남겨둔 것이 추상 메서드
			ex) public void function();

		-메소드의 내용이 상속받은 클래스에 따라 달라질수 있기 떄문
			
---------------------------------------------------------------------------------------------------------------------------
	인터페이스 -> inter(~사이의) + face(마주하다) -> 물체들 사이에서 상호작용을 하기 위해
							매개역할을 하는 것


언터페이스(interface)
	-인터페이스는 일종의 추상클래스이다.
	-인터페이스는 추상클래스 처럼 추상 메서드를 가지지만 추상클래스보다 추상화정도가 높아,
	추상클래스와는 달리 몸통을 가진 일반 메소드 또는 멤버 변수를 구성원으로 가질 수 없다.
	-오직 추상메소드(abstract)과 상수(final)만을 멤버로 가질수 있으며 그외의 다른 어떠한 요소도 허용되지 않는다.
	-밑그림만 그려져있는 기본 설계도라고 생각
	-인터페이스도 불완전한 것이기 때문에 그 자체로 사용되기 보다는
		다른 클래스를 작성하는데 도움을 줄 목적으로 작성된다.

	1.인터페이스 작성
		-키워드로 class대신 interface를 사용한다.
		class 클래스명 -> interface 인터페이스명{}
		-일반적인 클래스 멤버들과 달리 인터페이스의 멤버들은 다음과 같이 제약사항이 있다.
			*모든 메소드는 public abstract 메소드이여야 하며, 이는 생략이 가능하다.
			*모든 멤버 변수는 public static final이여 하며, 이는 생략이 가능하다.
		-> 인터페이스에 정의된 모든 멤버에 예외없이 적용되는 사항이기 때문에
			제어자를 생략할 수 있는 것이며, 생략된 제어자는 jvm이 자동으로 추가해준다.

	2.인터페이스의 상속
		-인터페이스는 인터페이스로만 상속 받을 수 있다.
		-클래스와 달리 인터페이스는 다중상속, 여러개의 인터페이스로부터 상속이 가능
		-인터페이스는 정확히는 상속한다는 말 대신에 구현한다 라는 표현을 사용
	
	3.인터페이스의 구현
		-인터페이스도 추상클래스 처럼 그 자체로는 인스턴스를 생성할 수 없으며
		추상 클래스가 상속을 통해 추상 메소드를 완성하는 것처럼,
		인터페이스도 자신에게 정의된 추상메소드의  몸통을 만들어주는 클래스를 작성

			*다만 클래스를 확장한다는 의미의 extends를 사용하는게 아닌
			인터페이스를 구현한다는 의미로 implements 키워드를 사용한다.

			*인터페이스의 이름은 주로 '~을 할 수 있는'의미의 '~able'로 끝나는 것이 많은데
			그 이유는 어떠한 기능 또는 행위를 하는데 필욯나 메소드를 제공한다는 의미를
			강조하기 위해서이다.
			또한 인터페이스를 구현한 클래스는 '~를 할 수 있는'능력을 갖추었다는 의미이기도 함
	
	4.인터페이스를 이용한 다형성
		-다형성에서 자손클래스의 인스턴스를 조상타입의 참조변수로 참고하는 것이 가능했다.
		
		-인터페이스 역시 이를 구현한 클래스의 조상이라고 할 수 있으므로,
		해당 인터페이스 타입의 참조변수로 이를 구현한 클래스의 인스턴스를 참조할 수 있으며,
		인터페이스 타입으로의  형변환도 가능하다.
		
		-인터페이스도 메소드의 매개변수의 타입으로 사용할 수 있으며, 메소드의 리턴타입으로
		인터페이스의 타입을 지정하는것도 가능하다.

		*return 타입이 인터페이스라는 것은 메소드가 해당 인터페이스를 구현한 클래스의 
		(업캐스팅된)인스턴스를 반환한다는 의미

	5.인터페이스의 장점
		5-1) 표준화가 가능하다.
			-프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음,
			개발자에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써
			보다 일관되고 정형화된 프로그램 개발이 가능하다.

		5-2) 개발 시간을 단축 시킬 수 있다.
			-인터페이스가 작성되면 메소드를 호출하는 쪽과 다른 한쪽에서는 
			인터페이스를  구현하는 클래스를 작성하게되면, 인터페이스를 구현하는
			클래스가 작성될 때까지 기다리지 않고 동시에 개발이 가능하다.

		5-3) 서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
			-서로 상속관계에 있지도 않고, 조상클래스를  가지고 있지 않은 서로
			아무런 관계도 없는 클래스에서 하나의 인터페이스를 공통적으로 구현하게 함으로써
			관계를 맺어줄 수 있다.

		5-4) 독립적인 프로그래밍이 가능하다.
			-클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서
			간접적인 관계로 변경하면, 한 클래스의 변경이 다른 클래스에  영향을 미치지 않는
			독립적인 프로그래밍이 가능하다.
  
---------------------------------------------------------------------------------------------------------------------
내부 클래스(inner class), 중첩 클래스

	>어떠한 클래스 내부에 생성된 클래스
	>두 클래스 멤버들 간에 서로 쉽게 접근할 수 있도록 만든것
	>내부 클래스는 외부 클래스의 모든 멤버들을 마치 자신의 멤버인 것처럼 사용할 수 있다.
	>코드의 복잡성을 줄일 수 있다.

	종류

	1.인스턴스 클래스
		클래스 내부에서 인스턴스 멤버처럼 사용되는 클래스

	2.스태틱 클래스
		클래스 내부에서 스태틱 멤버처럼 사용되는 클래스
		static 키워드를 사용

	3.지역 클래스
		메서드나 초기화 블록의 내부에서 지역변수처럼 사용되는 클래스
		메서드 내부에 선언된 클래스

	>>내부 클래스도 클래스이기 때문에 제어자(static, abstract, ..)사용이 가능
	>>접근 제어자도 사용가능

	다른데서는 클래스가 사용되지 않고, 오로지 메소드 안에서만 클래스가 사용될 경우에는
		내부 클래스로 만들어서 간단히 사용할 수 있다.