Wrapper 클래스
	기본 자료형들을 객체로 다루는데 사용한다.

기본 자료형과는 다르게 래퍼 클래스는 클래스이므로 인스턴스를 생성해서 사용한다.

	박싱(Boxing)
		기본자료형 -->래퍼 클래스타입
	
	언박싱(UnBoxing)
		래퍼클래스타입 --> 기본 자료형


Object 클래스
	자바의 최상위 클래스

	equals(Objext obj): 객체의 참조변수를 비교하여 boolean타입 값을 반환
	hashcode():객체의 해시코드 값을 반환하는 메서드
		해시코드(hash code):해시함수를 통해 반환되는 객체가 저장된 위치 값
	toString():객체에 대한 기본적인 정보를 문자열로 반환
		Object크래스의 toString() 메서드는 클래스의 정보와 해시코드를 반환

------------------------------------------------------------------------------------------------------------

문자열 클래스
	문자열과 관련된 다양한 메소드를 사용할 수 있다.

	length(): 문자열의 길이를 반환한다.
	concat(문자열): 문자열을 연결한다.
	substring(인덱스, 잘라낼 길이): 문자열을 잘라낸다.
	toUpperCase(), toLowerCase(): 문자열을 각각 대문자, 소문자로 변경
	charAt(인덱스번호): 문자열의 해당 인덱스를 문자로 반환

	indexOf(찾고싶은 문자열 or 문자): 해당 문자열 속 문자의 인덱스 번호를 return한다.
	split("무엇을 기준으로 자를지"): 해당 문자열을 자른 문자열을 return한다.
	join("무엇을 기준으로 합질지",배열): 배열 속 문자열 요소들을 연결하여 하나의 문자열로 return한다.
	format(): 문자열에 적절한 포맷을 준다.

-------------------------------------------------------------------------

Random 클래스
	무작위 값을 얻고 싶을 때 사용

	random(): 현재 시간을 종자 값으로 인스턴스 생성
	
	nextInt(), nextDouble()..:여러 랜덤 자료 변환

----------------------------------------------------------------------
java.util 패키지


util 패키지 특징

	-언어를 인코딩 해주는 기능이 있다. ex) 윈도우에서 중국어, 일본어 등은 출력시 깨지는 현상이 발생하는데,
		이를 정상적으로 출력 되도도록 하는 기능

	-배열 대신 활용할 수 있다. 배열이 메모리 공간의 크기를 정해 놓고 사용한다면,
		컬렉션 시스템은 무한대로 데이터를 넣을 수 있어 배열보다 수정이나 관리가 편하다.

	-날짜를 관리할 수 있다.

	-List 인터페이스를 구현할 수 있다. List 인터페이스를 구현하는 것들은 모두 순서를 가지고 있으며,
		초기 용량을 고려하지 않아도 된다.
		(List 인터페이스는 사이즈 변경이 가능한 배열긔 구현이라고 생각)

1. 시간처리: 자바에서 시간을 다루는 자료형 long(실수형)이다.
	->java.util.Calender 클래스,  java.util.date 클래스, simpleDateFormat 클래스,...

	-Systeom.currentTimeMils(): 현재 운영체제의 시각을 long타입으로 반환
		-> 1970년 1월 1일을 기준으로 현재까지의 시간

	-java.util.Calendar -> 추상 클래스, getInsrance()라는 메서드를 통해서
		GregorianmCalendar 인스턴스를 생성해야한다.

	-simpleDateFormat: 날짜를 형식화 하는 클래스

	-java.util.Date -> 에러가 많아서 최근에는 거의 사용하지 않는다.

2.java.util.Scanner: 입력을 도와주는 클래스
	>> 다양한 소스로부터 데이터를 읽어올 수 있다.

	->Scanner(File)
	->Scanner(InputStream source)
	->Scanner(String source)
	->Scanner(Readable source)

3.자바 time 패키지
4.Timer/TimerTask: 개발자가 원하는 특정한 시간에 코드를 실행하거나 특정시간 간격으로
		반복되는 작업을 할 수 있게 해준다.
	
		->사용할 때 TimerTask를 상속받는 새로운 클래스를 선언,
		TimerTask 클래스의 run 추상메서드를 오버라이딩 해야한다.

5.BigDecimal: 정확한 소수점 연산을 위해서 사용한다.
	->import.java.match.BigDecimal

6.formatting: 형식을 지정해주는 클래스
	ex) DecimalFormat: 숫자를 형식화는 클래스

	패턴을 정의하고 패턴을 이용해서 인스턴스를 생성한 후 format 메서드를 호출해서 문자열로 반환

	->import.java.text.DecimalFormat

lang 패키지랑 util 패키지 -> 어떤 클래스가 있는지, 어떤 메서드를 활용할 수 있는지
		사용해보고, 정리하기
		->7/22(금)까지 해보기
-------------------------------------------

자바에서는 에러, 예외
	
	예외 (Exception)
	에러 (Error)
	->둘다 오류는 오류

	예외는
		개발자가 다룰 수 있는 오류 ex) 인덱스 오류, 네트워크 문제
	에러는
		개발자가 다룰 수 없는 오류

	에러: 개발자가 조치를 취할 수 없는 부분 ex)메모리 부족, JVM 동작 이상
	컴파일 에러: 컴파일 시 발생하는 에러 ex)오타, 잘못된 자료형
	런타임 에러: 프로그램이 실행하는 도중에 발생하는 에러
	로직 에러: 실행은 되지만 의도와는 다르게 동작하는 에러

예외처리(Exception Handling)
	예외가 발생된다면 다른 코드를 실행시켜 프로그램을 정상적으로 종료할 수 있또록
		예외를 다루는 행위
	->심각한 시스템 오류를 방지

try~catch 문
	try{
		예외가 발생할 가능성이 있는 코드
	}catch(예외 객체){
		오류가 발생했을 때 실행할 코드
	}

	>>여러개의 catch문을 사용할 수 있다.

자바는 예외를 클래스를 통해서 관리
	Object -> Throwable -> Exception
