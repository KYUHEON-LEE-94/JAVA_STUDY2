인스턴스 메서드 -> 클래스 멤버    호출: 가능
클래스 메서드 -> 인스턴스 멤버    호출: 불가능
인스턴스 메서드 -> 인스턴스 멤버 호출: 가능
클래스 메서드 -> 클래스 멤버      호출: 가능

제어자
	클래스나 멤버의 사용을 제어하기 위해서 사용한다.
			-외부에서 접근을 막는 접근 제어자
			-static
			-상수화를 하는 final

접근 제어자(access modifier)

		같은 패키지,	같은 패키지,	다른 패키지
		같은 클래스	다른 클래스	다른 클래스


public		    O		      O		     O
protected	    O		      O		     X (자식은 가능)
default		    O		      O		     X
private		    O		      X		     X

---------------------------------------------------------------------------------------

private 변수는 외부 클래스에서 직접적인 접근이 불가능하다.
따라서 메서드를 통한 간접적인 접근을 해야한다.

Getters 와 Setters를 사용하여 간접적인 접근을 한다. (알트+시프트+s)

	private 변수로 설정된 변수들은 다른 틀래스에서 접근을 할 수 없다.
	따라서 public으로 설정된 메소드를 통해서 우회적으로 접근해야한다.
	이때, 변수에 값을 설정하는 메소드를 seteer라고 하고
	변수에 저장되어있는 값을 가져오는 메소드를 getter라고 한다.

	변수에 값을 직접적으로 저장하지 못하게 함으로써 유효한 값이 들어왔는지
	검사를 할 수 있으며

	안정성을 높힐 수 있다.

-----
alt+shift+a로 복수의 줄에 타자 가능

------------------------------
객체 타입의 배열
	배열은 배열인데 요소로 객체가 들어가있는 배열
	한번 접근했을 때의 결과가 객체라고 생각하고 활용한다.

--------------------------------------------------------------------------------------------

상속(inheritance)
	- 부모의 코드 자식이 물려받아서 사용하는 것
	-기존의 클래스를 사용해서 새로운 클래스를 작성하는 것
		두 클래스를 부모와 자식으로 관계를 맺어주는 것
		자식은 부모의 모든 멤버를 상속 받는다(생성자는 상속X)

-상속 관계(is~a): ~은 ~이다.
	-> 공통부분은 부모에서 고나리하고 개별 부분은 자식에서 관리
	->부모의 변경은 자식에 영향을 미치지만, 자식의 변경은 부모에 영향을 미치지 않는다.

-포함 관계(has~a)(composite): ~은 ~을 가지고 있다.
	-> 한 클래스의 멤버 변수로 다른 클래스를 선언
	-> 작은 단위의 클래스를 먼저 만들고, 이 둘을 조합해서 하나의 커다란 클래스를 만듬


class 클래스명extends 부모클래스명{


}
	
	자바에서는 단일 상속만을 허용한다.
		-> ex) class Child extends Parent1, Parent2 ->불가능

	클래스 앞에 final이 붙은 경우에는 상속이 불가능하다.
	final class Parent{}                        -->JS의 const
	class Child extends Parent{} -->불가능

컨트롤+ t 단축키로 계층구조(hierachy)를 확인할 수 있다.