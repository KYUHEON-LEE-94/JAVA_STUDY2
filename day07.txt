Object --> Throwable --> Error -->OutOfMemoryError
			-->...

		
	
		-->Exception
			-->IOException

			-->ClassNotFoundException

			-->.....

			-->RuntimeException(프로그래머의 실수로 발생하는 예외)
				:예외처리 필수
				-->ArithmeticException
				-->ClassCastException
				-->NullPointerException
				-->...
				-->IndexOutOfBoundsException


---------------------------------------------------------------------------------------

try ~ catch 문
	
	try{
		예외가 발생할 수 있는 코드
	}catch(예외객체){
		예외가 발생했을 떄 실행할 코드
	}

	-try 영역, try 블럭에서 예외가 발생하면 예외를 처리할 catch 블럭을 찾는다.
	-첫번째 catch블럭 부터 순서대로 찾아 내려간다. 일치하는 cath블럭이 없으면
		예외는 처리되지 않는다.
	-Exception 클래스는 모든 종류의 예외를 처리할 수 있다.
		> 반드시 마지막 cathc 블럭에 사용되어야 한다.

	printStackTrace(): 예외발생 당시의 호출스택(call stack)에 있었던 메서드의 정보와
			예외 메시지를 화면에 출력한다.

	getMessage(): 발생한 예외 클래스의 인트선스 저장된 메시지를 return한다.

-----------------------------------------------------------------------------------

finally
	-예외가 발생하든 안하든 실행되는 영역
	-예외가 발생된다면 catch -> finally 문이 실행
	-예외가 발생하지 않는다면 try -> finaly 문이 실행

	try{
		예외가 발생할 수있는 코드
	}catch(예외 객체){
		예외가 발생했을 때 실행할 코드
	}finally{
		예외가 발생 한던 안하던 항상 실행되는 코드
	}

------------------------------------------------------------------------------

오류를 발생시키는 키워드: throw

throw new 오류클래스 성성자;

ex) throw new ArrayIndexOutOfboundsException();

--> 예외 되던지기
	re-throwing
---------------------------------------------------------------------------

throws
	예외처리를 떠넘길 때 사용하는 키워드
	(현재 메서드가 예외를 처리하지 않고 자신을 호출한 쪽으로 예외처리에 대한 책임을 
		넘기는 것)

	-> 메서드 호출한 쪽으로 책임을 넘기기 떄문에 호출한 쪽에 대해 문법적 강제성이 발생
	-> 예외를 넘겨받은 쪽은 직접 예외를 처리하거나 자신도 예외를 넘겨야 한다.

	-> 메서드를 정의할 때 예외처리를 떠넘김 으로서 사용하는 사람이
		원하는 방식으로 예외처리를 할 수 있게 한다(책임 회피 아님!!)


----------------------------------------------------------------------------------------------

파일 입출력
	콘솔창에 파일 출력이 되는 것이 아니라 파일로 입출력이 되도록하는 것

	코드는 메모리에 저장 -> 코드가 종료되면 코드가 메모리(임시 기억 장치)에서 해제됨
	파일 입출력으로 장기기억장치에 저장하면 다음 프로그램 실행때도 사용할 수 있음
		
	IO
		IO:input과 output 입력과 출력
	스트림(Stream)
		데이터의 흐름
		한 방향으로만 가능하다.
		먼저 들어온 데이터가 먼저 나가는 FIFO 구조를 이룬다.

	바이트 기반 스트림
	바이트 기반  보조 스트림
	문자 기반 스트림
	문자기반 보조 스트림
	객체 직렬화(객체 전송의 단계, 마샬링, 직렬화, 언마샬링)

-------------------------------------------------------------------------------------------

파일 입출력의 과정(한글을 다루는 경우에는 조심해야함)

1.파일객체 만들기
2.스트림열기
	2-1)버퍼를 생성(버퍼라는 공간에 담아뒀다가 필요한 애들만 받아오는 방식을 사용)
3.파일 입력 / 출력
4-0 버퍼 닫기
4.스트림 닫기

한글을 다루는 경우
	>텍스트 인코딩 확인
		인코딩: 정보의 형태나 형식을 표준화, 보안, 처리속도 향상,...
			등을 위해서 다른 형태나 형식으로 변환하는 처리, 처리방식
			->컴퓨터가 이해할 수 있는 형식으로 바꾸어 주는 것

		인코딩: ASCII,URL,HTML.MS Script
		
		문자열인코딩:ASCII,ANIS, EUC-KR,UTF-8(16,32),UNICODE,CP949

		ASCII(American Standard Code for Information Interchange)
			>>최초의 문자열 인코딩, 7bit
			>>영어만을 고려해서 만들어짐
	
		ANSI(American National Standard Institute)	

			>>ASCII 코드 확장판, 8bit
			>>영어 이외의 다른 언어를 사용할 때, Code Page를 동일하게 맞춰야한다.

		EUC-KR(Extended Unix Code - Korea)
			>>한글 지원을 위해 유닉스 계열에서 나온 완성형 코드 조합
		
		UTF(Universal Coded Character Set + Transformaion Format) - 8(bit)
			>>유니코드를 위한 가변 길이 문자 인코딩 방식(멀티바이트)
			>>ANSI의 단점 보완

			16-ANSI와 호환이 안된다.
			32-비효율적

		UNICODE: 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현할 수 있도록 고안된
				코드 조합
				>>문자를 2byte 숫자로 1:1 매핑 시키는 방식


https://dillinger.io/ - 마크업

