클래스 설계의 원칙(SOLID)

1.SRP(Sing Responsibility Principle) 단일 책임 원칙
	-클래스는 단 한개의 책임을 가져야 한다.(클래스를  수정할 이유가 오직 하나이어야 한다.)
	-ex) 계산기 -> 계산을 하는 책임, GUI 책임을 분리해서, 각각의 클래스로 설계해야한다.

2.OCP(Open closed Principle) 개방-폐쇄 원칙
	-확장에는 열려있어야 하고, 변경에는 닫혀있어야 한다.
	-ex)캐릭터 클래스를 만들때, 캐릭터마다 행동이 다르다면, 행동구현은 캐릭터 클래스의 자식 클래스에서
		재정의 한다.(Method Override)

3.LSP(Liskov Subsitution Principle) 리스코프 치환 법칙
	-자식 클래스는 언제나  자신의 부모 클래스와 교체할 수 있다는 원칙

4.ISP(Interface Segregation Principle) 인터페이스 분리 법칙
	-클래스에서 사용하지 않는(상관없는) 메소드는 분리해야한다.

5.DIP(Dependency Inversion Principle) 의존성 역전  법칙
	-부모 클래스는 자식 클래스의 구현에 의존해서는 안된다.
		->자식 클래스 코드 변경 또는 자식 클래스 변경시, 부모 클래스 코드를 변경해야하는 상황을 만들면 안됨
	-자식 클래스에서 부모 클래스 수준에서 정의한 추상화 정도에 의존할 필요가 있다.

-------------------------------------------------------------
추상 메서드와 추상 클래스
	1.추상클래스(abstract class)
		-추상메서드를 가지는 클래스
		-클래스를 설계도에 비유하면, 추상 클래스는 미완성 설계도로 비유할 수 있다.
			>완성되지 못한채로 남겨진 설계도
		-미완성 설계도로는 제품을 만들수 없듯이 추상클래스로 인스턴스를 생성할 수 없다.
		-추상 클래스는 상속을 통해서 자손클래스에 의해서만 완성될 수 있다(확장, extends)
			> 추상 클래스를 상속받은 클래스들은 반드시 추상 메서드를 
			자신의 클래스에 맞게 구현하라는 강제성이 발생

		-추상클래스는 새로운 클래스를 작성하는데 있어서 바탕이되는 클래스로서의 중요한 의미를 가진다.

		-추상클래스는 클래스 앞에 'abstract'키워드를 붙이기만 한다.
		-이렇게 함으로써 이 클래스를 사용할 때 ,클래스 선언부의 abstract을 보고 이 클래스에는
			추상 메서드가 있으니, 상속을 통해서 구현해야 한다는 것을 알 수 잇다.
		 	ex)abstract class Car

	1-1)  추상 메서드(abstract method)
		-선언부만 작성하고 구현부는 작성하지 않은채로 남겨둔 것이 추상메서드
		-즉, 설계를 해놓고 실제 수행도리 내용은 작성하지 않았기 떄문에 미완성 메소드이다.
	
		-메소드를 이와 같이 미완성 상태로 남겨놓는 이유는 메소드의 내용이
			상속받은 클래스에 따라 달라질 수 있기 때문
			>부모클래스에서 선언부만 작성하고, 실제 내용은 상속 받은 클래스에서 구현하도록

		-추상 메서드 역시 메서드 앞에 키워드 abstract를 붙혀주고,
		추상 메서드는 구현부가 없으므로 중괄호{} 대신 ;을 붙여준다.

--------------------------------------------------------
인터페이스(interface)
	-인터페이스는 일종의 추상클래스이다.
	-인터페이스도 추상클래스와 마찬가지로 추상메서드를 가지지만 
		추상클래스보다 추상화 정도가 높아서
		추상클래스와는 달리 몸통을 가진 일반 메소드 또는 메버변수를 구성원으로 가질 수 없다. 
	-오직 추상메서드(abstract)와 상수(final)만을 멤버로 가질 수 있으며 그 외의 다른 어떠한 요소도 허용되지 않는다.

	-추상클래스를 미완성 설계도라고 한다면 인터페이스는 구현된 것이 아무것도 없는 밑그림만 그려져 있는 
	기본 설계도라고 할 수 있다.

	-인터페이스도 추상클래스처럼 미완성된 것이기 때문에 그 자체로 사용되기 보다는
		다른 클래스를 작성하는데 도움을 줄 목적으로 작성된다.
